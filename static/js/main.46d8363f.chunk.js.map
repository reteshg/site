{"version":3,"sources":["components/navigation.js","components/home.js","components/features.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","Container","fluid","Navbar","bg","expand","fixed","collapseOnSelect","Brand","as","Link","to","title","Toggle","Collapse","Nav","className","NavItem","eventkey","exact","Home","Features","App","basename","process","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAiCeA,EA7BI,SAACC,GAAD,OACnB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAQ,KAAMC,MAAM,MAAMC,kBAAgB,GAE3D,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAAKX,EAAMY,OAEtC,kBAACT,EAAA,EAAOU,OAAR,MACA,kBAACV,EAAA,EAAOW,SAAR,KACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAIL,KAAL,CAAUQ,SAAU,EAAGT,GAAIC,IAAMS,OAAK,EAACR,GAAG,KAA1C,SAGF,kBAACM,EAAA,EAAD,KACE,kBAACF,EAAA,EAAIL,KAAL,CAAUQ,SAAU,EAAGT,GAAIC,IAAMC,GAAG,aAApC,aAGF,kBAACM,EAAA,EAAD,KACE,kBAACF,EAAA,EAAIL,KAAL,CAAUQ,SAAU,EAAGT,GAAIC,IAAMC,GAAG,aAApC,cCSOS,EA5BF,SAACpB,GAAD,OAGb,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACR,4BAAKF,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,SCfJS,EATE,SAACrB,GAAD,OACb,8BACI,4BAAKA,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,OACX,4BAAKZ,EAAMY,S,MCaJU,MAZf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,SACvB,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAYJ,MAAM,sBAClB,kBAAC,IAAD,CAAOO,OAAK,EAACM,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,CAAMd,MAAM,wBAChD,kBAAC,IAAD,CAAOa,KAAK,YAAYC,OAAQ,kBAAM,kBAAC,EAAD,CAAUd,MAAM,+BCF1Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46d8363f.chunk.js","sourcesContent":["import React from 'react';\nimport {Container,Navbar,Nav,NavItem} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\nconst Navigation = (props) => (\n<Container fluid>\n  <Navbar bg=\"light\" expand={'sm'} fixed=\"top\" collapseOnSelect>\n    \n    <Navbar.Brand as={Link} to=\"/\">{props.title}</Navbar.Brand>\n    \n    <Navbar.Toggle/>\n    <Navbar.Collapse>\n    <Nav className=\"mr-auto\">\n      <NavItem>\n        <Nav.Link eventkey={1} as={Link} exact to=\"/\">Home</Nav.Link>\n      </NavItem>\n      \n      <NavItem>\n        <Nav.Link eventkey={2} as={Link} to=\"/features\">Features</Nav.Link>\n      </NavItem>  \n\n      <NavItem>\n        <Nav.Link eventkey={3} as={Link} to=\"/features\">FAQs</Nav.Link>\n      </NavItem>  \n    </Nav>\n    </Navbar.Collapse>\n\n  </Navbar>\n  </Container>\n      \n\n);\n\nexport default Navigation;","import React from 'react';\nimport {Container} from 'react-bootstrap';\n\nconst Home = (props) => (\n   \n\n<Container fluid>\n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n\n        </Container>\n);\n\nexport default Home;","import React from 'react';\n\nconst Features = (props) => (\n    <span>\n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        <h1>{props.title}</h1>    \n        </span>\n);\n\nexport default Features;","import React from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Navigation from './components/navigation';\nimport Home from './components/home';\nimport Features from './components/features';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navigation title=\"The Timelapse App\"/>\n        <Route exact path=\"/\" render={() => <Home title=\"This is homepage\" />} />\n        <Route path=\"/features\" render={() => <Features title=\"This is feature page\" />} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}